from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime
from bot.models import User, PaymentHistory
from bot.pricing import get_price_by_class
from bot import bot
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'

    def handle(self, *args, **options):
        current_date = timezone.now()
        current_month = current_date.month + 1
        current_year = current_date.year
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
        users = User.objects.filter(is_admin=False, is_registered=True)
        
        reminder_count = 0
        success_count = 0
        
        for user in users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                is_paid = PaymentHistory.objects.filter(
                    user=user,
                    month=current_month,
                    year=current_year,
                    payment__status='succeeded'
                ).exists()


                if not is_paid:
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
                    price_info = get_price_by_class(user.course_or_class)
                    
                    if price_info:
                        price = price_info['price']
                        class_name = price_info['name']
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
                        price = 5000
                        class_name = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    message_text = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
                        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name or '–¥–æ—Ä–æ–≥–æ–π —É—á–µ–Ω–∏–∫'}!\n\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è –∑–∞ {str(current_month).rjust(2, '0')}.{current_year}.\n"
                        f"–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è.\n\n"
                        f"üìö –¢–∞—Ä–∏—Ñ: {class_name}\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} ‚ÇΩ\n\n"
                        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí∞ –û–ø–ª–∞—Ç–∞ üí∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞.\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üìö"
                    )
                    
                    bot.send_message(user.telegram_id, message_text)
                    reminder_count += 1
                    self.stdout.write(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (–∫–ª–∞—Å—Å: {user.course_or_class}, —Ü–µ–Ω–∞: {price} ‚ÇΩ)")
                    
                else:
                    self.stdout.write(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                self.stdout.write(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                continue
        
        self.stdout.write(
            self.style.SUCCESS(
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! '
                f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {reminder_count}, '
                f'–£—Å–ø–µ—à–Ω–æ: {success_count}'
            )
        ) 