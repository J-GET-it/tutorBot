from decimal import Decimal
from django.conf import settings
from telebot.types import CallbackQuery, Message
from bot import bot
from bot.models import User, StudentProfile, Payment, PaymentHistory
from bot.keyboards import (
    generate_payment_menu_keyboard,
    generate_payment_method_keyboard,
    generate_payment_months_keyboard,
    generate_balance_payment_months_keyboard,
    generate_payment_confirmation_keyboard,
    generate_check_payment_keyboard,
    UNIVERSAL_BUTTONS,
    MONTH_NAMES
)
from bot.pricing import get_price_by_class
from bot.yookassa_client import YooKassaClient
from django.utils import timezone


def get_active_profile(user: User) -> StudentProfile:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return user.student_profiles.get(is_active=True)
    except StudentProfile.DoesNotExist:
        return None


def payment_menu(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    markup = generate_payment_menu_keyboard()
    text = "üí∞ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        text=text,
        reply_markup=markup,
        message_id=call.message.message_id
    )


def start_payment(call: CallbackQuery) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        if not user.is_registered:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = get_active_profile(user)
        if not active_profile:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            text += "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏'."
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=UNIVERSAL_BUTTONS,
                message_id=call.message.message_id
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
        price_info = get_price_by_class(active_profile.course_or_class)
        
        if not price_info:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.\n"
            text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=UNIVERSAL_BUTTONS,
                message_id=call.message.message_id
            )
            return
        
        markup = generate_payment_method_keyboard()
        text = f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π\n\n"
        text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {active_profile.course_or_class}\n"
        text += f"üíØ –¢–∞—Ä–∏—Ñ: {price_info['name']}\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_info['price']} —Ä—É–±.\n"
        text += f"üí≥ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ñ–∏–ª—è: {active_profile.balance} ‚ÇΩ\n"
        text += f"üìù {price_info['description']}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def select_payment_method(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        active_profile = get_active_profile(user)
        if not active_profile:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
        price_info = get_price_by_class(active_profile.course_or_class)
        
        if not price_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            return
        
        if call.data == "pay_with_yookassa":
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã
            markup = generate_payment_months_keyboard()
            text = f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa\n\n"
            text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
            text += f"üìö –ö–ª–∞—Å—Å: {active_profile.course_or_class}\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_info['price']} —Ä—É–±.\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
            
        elif call.data == "pay_with_balance":
            # –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã
            markup = generate_balance_payment_months_keyboard()
            text = f"üí∞ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞\n\n"
            text += f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {active_profile.profile_name}\n"
            text += f"üìö –ö–ª–∞—Å—Å: {active_profile.course_or_class}\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_info['price']} —Ä—É–±.\n"
            text += f"üí≥ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ñ–∏–ª—è: {active_profile.balance} ‚ÇΩ\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
            
        else:
            return
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def select_payment_month(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: pay_month_{month}_{year}
        parts = call.data.split('_')
        if len(parts) != 4:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        month = int(parts[2])
        year = int(parts[3])
        
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
        if PaymentHistory.is_month_paid(user, month, year):
            bot.answer_callback_query(call.id, f"–ú–µ—Å—è—Ü {MONTH_NAMES[month]} {year} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ
        price_info = get_price_by_class(user.course_or_class)
        
        if not price_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        yookassa_client = YooKassaClient()
        
        amount = Decimal(str(price_info['price']))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É
        description = f"–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π –∑–∞ {MONTH_NAMES[month]} {year} - {price_info['name']}"
        
        metadata = {
            "user_id": user.telegram_id,
            "month": month,
            "year": year,
            "pricing_plan": price_info['key']
        }
        
        print(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        print(f"–°—É–º–º–∞: {amount}, –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
        
        yookassa_response = yookassa_client.create_payment(
            amount=amount,
            description=description,
            metadata=metadata
        )
        
        print(f"–û—Ç–≤–µ—Ç –æ—Ç –ÆKassa: {yookassa_response}")
        
        if not yookassa_response:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            text += "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa\n"
            text += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
            text += "‚Ä¢ –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ÆKassa\n\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=UNIVERSAL_BUTTONS,
                message_id=call.message.message_id
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        payment = Payment.objects.create(
            user=user,
            yookassa_payment_id=yookassa_response['id'],
            amount=amount,
            status=yookassa_response['status'],
            description=description,
            payment_month=month,
            payment_year=year,
            pricing_plan=price_info['key']
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = yookassa_response['confirmation']['confirmation_url']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        markup = generate_check_payment_keyboard(payment.yookassa_payment_id, month, year)
        
        text = f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
        text += f"üë§ –£—á–µ–Ω–∏–∫: {user.full_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {user.course_or_class}\n"
        text += f"üíØ –¢–∞—Ä–∏—Ñ: {price_info['name']}\n"
        text += f"üìÖ –ú–µ—Å—è—Ü: {MONTH_NAMES[month]} {year}\n"
        text += f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
        text += "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n"
        text += "2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
        text += "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    
    except (ValueError, User.DoesNotExist) as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def select_balance_payment_month(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: pay_balance_month_{month}_{year}
        parts = call.data.split('_')
        if len(parts) != 5:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        month = int(parts[3])
        year = int(parts[4])
        
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
        if PaymentHistory.is_month_paid(user, month, year):
            bot.answer_callback_query(call.id, f"–ú–µ—Å—è—Ü {MONTH_NAMES[month]} {year} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ
        price_info = get_price_by_class(user.course_or_class)
        
        if not price_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            return
        
        amount = Decimal(str(price_info['price']))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        if user.balance < amount:
            bot.answer_callback_query(call.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {amount} ‚ÇΩ\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance} ‚ÇΩ")
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        user.balance -= amount
        user.save()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç
        PaymentHistory.objects.create(
            user=user,
            payment=None,  # –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
            month=month,
            year=year,
            amount_paid=amount,
            pricing_plan=price_info['key'],
            payment_type='balance',
            status='completed'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        notify_payment_success(user.telegram_id, month, year, amount)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        notify_admins_about_payment(user, month, year, amount)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üéâ –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        text += f"üë§ –£—á–µ–Ω–∏–∫: {user.full_name}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {user.course_or_class}\n"
        text += f"üíØ –¢–∞—Ä–∏—Ñ: {price_info['name']}\n"
        text += f"üìÖ –ú–µ—Å—è—Ü: {MONTH_NAMES[month]} {year}\n"
        text += f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
        text += f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user.balance} ‚ÇΩ\n\n"
        text += f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ!"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=generate_payment_menu_keyboard(),
            message_id=call.message.message_id
        )
    
    except (ValueError, User.DoesNotExist) as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def confirm_payment(call: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: confirm_payment_{month}_{year}
        parts = call.data.split('_')
        if len(parts) != 4:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        month = int(parts[2])
        year = int(parts[3])
        
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ –º–µ—Å—è—Ü
        if PaymentHistory.is_month_paid(user, month, year):
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ
        price_info = get_price_by_class(user.course_or_class)
        
        if not price_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        yookassa_client = YooKassaClient()
        
        amount = Decimal(str(price_info['price']))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É
        description = f"–û–ø–ª–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π –∑–∞ {MONTH_NAMES[month]} {year} - {price_info['name']}"
        
        metadata = {
            "user_id": user.telegram_id,
            "month": month,
            "year": year,
            "pricing_plan": price_info['key']
        }
        
        print(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        print(f"–°—É–º–º–∞: {amount}, –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")
        
        yookassa_response = yookassa_client.create_payment(
            amount=amount,
            description=description,
            metadata=metadata
        )
        
        print(f"–û—Ç–≤–µ—Ç –æ—Ç –ÆKassa: {yookassa_response}")
        
        if not yookassa_response:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            text += "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa\n"
            text += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
            text += "‚Ä¢ –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ÆKassa\n\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=UNIVERSAL_BUTTONS,
                message_id=call.message.message_id
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        payment = Payment.objects.create(
            user=user,
            yookassa_payment_id=yookassa_response['id'],
            amount=amount,
            status=yookassa_response['status'],
            description=description,
            payment_month=month,
            payment_year=year,
            pricing_plan=price_info['key']
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = yookassa_response['confirmation']['confirmation_url']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        markup = generate_check_payment_keyboard(payment.yookassa_payment_id, month, year)
        
        text = f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
        text += f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        text += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {MONTH_NAMES[month]} {year}\n"
        text += f"üíØ –¢–∞—Ä–∏—Ñ: {price_info['name']}\n\n"
        text += "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n"
        text += "2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
        text += "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    
    except (ValueError, User.DoesNotExist) as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def check_payment(call: CallbackQuery) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: check_payment_{payment_id}_{month}_{year}
        parts = call.data.split('_')
        if len(parts) != 5:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        payment_id = parts[2]
        month = int(parts[3])
        year = int(parts[4])
        
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
        if PaymentHistory.is_month_paid(user, month, year):
            bot.answer_callback_query(call.id, f"–ú–µ—Å—è—Ü {MONTH_NAMES[month]} {year} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –ÆKassa
        yookassa_client = YooKassaClient()
        payment_info = yookassa_client.get_payment(payment_id)
        
        if not payment_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ")
            return
        
        payment_status = payment_info.get('status')
        
        if payment_status == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                payment = Payment.objects.get(yookassa_payment_id=payment_id)
                payment.status = 'succeeded'
                payment.payment_method = payment_info.get('payment_method', {})
                payment.save()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç
                PaymentHistory.objects.create(
                    user=user,
                    payment=payment,
                    month=month,
                    year=year,
                    amount_paid=payment.amount,
                    pricing_plan=payment.pricing_plan
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                notify_payment_success(user.telegram_id, month, year, payment.amount)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                notify_admins_about_payment(user, month, year, payment.amount)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                text += f"üí∞ –°—É–º–º–∞: {payment.amount} —Ä—É–±.\n"
                text += f"üìÖ –ú–µ—Å—è—Ü: {MONTH_NAMES[month]} {year}\n"
                text += f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ!"
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    text=text,
                    reply_markup=generate_payment_menu_keyboard(),
                    message_id=call.message.message_id
                )
                
            except Payment.DoesNotExist:
                bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
        elif payment_status == 'pending':
            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif payment_status == 'canceled':
            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_status}")
    
    except (ValueError, User.DoesNotExist) as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def payment_history(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
        history = PaymentHistory.objects.filter(user=user).order_by('-year', '-month')
        
        text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç\n\n"
        
        if history.exists():
            for record in history:
                month_name = MONTH_NAMES[record.month]
                text += f"‚úÖ {month_name} {record.year} - {record.amount_paid} —Ä—É–±.\n"
                text += f"   üìÖ –û–ø–ª–∞—á–µ–Ω–æ: {record.paid_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            text += "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=UNIVERSAL_BUTTONS,
            message_id=call.message.message_id
        )
    
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def notify_payment_success(user_telegram_id: str, month: int, year: int, amount: Decimal):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        text = f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        text += f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        text += f"üìÖ –û–ø–ª–∞—á–µ–Ω –º–µ—Å—è—Ü: {MONTH_NAMES[month]} {year}\n"
        text += f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ!"
        
        bot.send_message(
            chat_id=user_telegram_id,
            text=text,
            reply_markup=generate_payment_menu_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


def notify_admins_about_payment(user: User, month: int, year: int, amount: Decimal):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = User.objects.filter(is_admin=True)
        
        if not admins.exists():
            return
        
        text = f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n\n"
        text += f"üë§ –£—á–µ–Ω–∏–∫: {user.full_name}\n"
        text += f"üÜî Telegram ID: {user.telegram_id}\n"
        text += f"üìö –ö–ª–∞—Å—Å: {user.course_or_class}\n"
        text += f"üìÖ –ú–µ—Å—è—Ü: {MONTH_NAMES[month]} {year}\n"
        text += f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {timezone.now().strftime('%d.%m.%Y %H:%M')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin in admins:
            try:
                bot.send_message(
                    chat_id=admin.telegram_id,
                    text=text
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}") 
