from django.db import transaction
from telebot.types import CallbackQuery, Message
from bot import bot
from bot.models import User, StudentProfile
from bot.keyboards import (
    generate_profiles_menu_keyboard,
    generate_profiles_list_keyboard,
    generate_profile_management_keyboard,
    generate_profile_data_management_keyboard,
    generate_profile_creation_keyboard,
    generate_profile_university_courses_keyboard,
    generate_profile_school_classes_keyboard,
    generate_profile_confirmation_keyboard,
    generate_profile_deletion_confirmation_keyboard,
    generate_profile_deletion_final_confirmation_keyboard,
    UNIVERSAL_BUTTONS
)
from bot.texts import (
    PROFILES_MENU_TEXT,
    PROFILES_LIST_TEXT,
    PROFILE_INFO_TEXT,
    PROFILE_DATA_MANAGEMENT_TEXT,
    PROFILE_CREATION_WELCOME,
    PROFILE_EDUCATION_CHOICE,
    PROFILE_UNIVERSITY_COURSE,
    PROFILE_SCHOOL_CLASS,
    PROFILE_CONFIRMATION,
    PROFILE_CREATED_SUCCESS,
    PROFILE_DELETION_CONFIRMATION,
    PROFILE_DELETION_FINAL_CONFIRMATION,
    PROFILE_DELETED_SUCCESS,
    PROFILE_SWITCHED_SUCCESS,
    NO_PROFILES_TEXT,
    PROFILE_ALREADY_EXISTS
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
profile_creation_states = {}


def profiles_menu(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        text = PROFILES_MENU_TEXT
        markup = generate_profiles_menu_keyboard()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def view_profiles(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        profiles = user.student_profiles.all().order_by('-is_active', 'created_at')
        
        if not profiles.exists():
            text = NO_PROFILES_TEXT
            markup = generate_profiles_menu_keyboard()
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            active_profile = get_active_profile(user)
            
            text = f"üë• –í–∞—à–∏ –ø—Ä–æ—Ñ–∏–ª–∏\n\n"
            
            if active_profile:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                education_display = active_profile.get_education_type_display() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                course_display = f"{active_profile.course_or_class} –∫—É—Ä—Å" if active_profile.education_type == 'university' else f"{active_profile.course_or_class} –∫–ª–∞—Å—Å"
                
                text += f"‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:**\n"
                text += f"üë§ {active_profile.profile_name}\n"
                text += f"üìö {course_display}\n"
                text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {active_profile.balance} ‚ÇΩ\n\n"
                text += f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            else:
                text += f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
                text += f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            
            markup = generate_profiles_list_keyboard(profiles)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def create_profile(call: CallbackQuery) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profile_creation_states[str(call.from_user.id)] = {
            'step': 'waiting_profile_name',
            'user_id': user.telegram_id
        }
        
        text = PROFILE_CREATION_WELCOME
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=UNIVERSAL_BUTTONS,
            message_id=call.message.message_id
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def handle_profile_creation_message(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    telegram_id = str(message.from_user.id)
    
    if telegram_id not in profile_creation_states:
        return
    
    state = profile_creation_states[telegram_id]
    
    if state['step'] == 'waiting_profile_name':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        profile_name = message.text.strip()
        if len(profile_name) < 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
            return
        
        try:
            user = User.objects.get(telegram_id=telegram_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            if user.student_profiles.filter(profile_name=profile_name).exists():
                bot.send_message(message.chat.id, PROFILE_ALREADY_EXISTS)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state['profile_name'] = profile_name
            state['step'] = 'waiting_education_choice'
            
            text = PROFILE_EDUCATION_CHOICE.format(profile_name=profile_name)
            markup = generate_profile_creation_keyboard()
            
            bot.send_message(message.chat.id, text, reply_markup=markup)
        except Exception as e:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return


def handle_profile_education_choice(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    telegram_id = str(call.from_user.id)
    
    if telegram_id not in profile_creation_states:
        return
    
    state = profile_creation_states[telegram_id]
    
    if state['step'] != 'waiting_education_choice':
        return
    
    education_type = call.data.replace('profile_education_', '')
    profile_name = state['profile_name']
    
    try:
        state['education_type'] = education_type
        state['step'] = 'waiting_course_or_class'
        
        if education_type == 'university':
            text = PROFILE_UNIVERSITY_COURSE.format(profile_name=profile_name)
            markup = generate_profile_university_courses_keyboard()
        else:  # school
            text = PROFILE_SCHOOL_CLASS.format(profile_name=profile_name)
            markup = generate_profile_school_classes_keyboard()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def handle_profile_course_or_class_choice(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    telegram_id = str(call.from_user.id)
    
    if telegram_id not in profile_creation_states:
        return
    
    state = profile_creation_states[telegram_id]
    
    if state['step'] != 'waiting_course_or_class':
        return
    
    course_or_class = call.data.replace('profile_course_', '').replace('profile_class_', '')
    profile_name = state['profile_name']
    education_type = state['education_type']
    
    try:
        state['course_or_class'] = course_or_class
        state['step'] = 'waiting_confirmation'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        education_display = "–í–£–ó" if education_type == 'university' else "–®–∫–æ–ª–∞"
        course_display = f"{course_or_class} –∫—É—Ä—Å" if education_type == 'university' else f"{course_or_class} –∫–ª–∞—Å—Å"
        
        text = PROFILE_CONFIRMATION.format(
            profile_name=profile_name,
            full_name=profile_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–∫ –§–ò–û –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            education_type=education_display,
            course_or_class=course_display
        )
        markup = generate_profile_confirmation_keyboard()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def confirm_profile_creation(call: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    telegram_id = str(call.from_user.id)
    
    if telegram_id not in profile_creation_states:
        return
    
    state = profile_creation_states[telegram_id]
    
    if state['step'] != 'waiting_confirmation':
        return
    
    try:
        with transaction.atomic():
            user = User.objects.get(telegram_id=telegram_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = StudentProfile.objects.create(
                user=user,
                profile_name=state['profile_name'],
                full_name=state['profile_name'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–∫ –§–ò–û
                education_type=state['education_type'],
                course_or_class=state['course_or_class'],
                is_active=True,
                is_registered=True
            )
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.student_profiles.exclude(id=profile.id).update(is_active=False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            education_display = "–í–£–ó" if state['education_type'] == 'university' else "–®–∫–æ–ª–∞"
            course_display = f"{state['course_or_class']} –∫—É—Ä—Å" if state['education_type'] == 'university' else f"{state['course_or_class']} –∫–ª–∞—Å—Å"
            
            text = PROFILE_CREATED_SUCCESS.format(
                profile_name=profile.profile_name,
                full_name=profile.full_name,
                education_type=education_display,
                course_or_class=course_display
            )
            markup = generate_profiles_menu_keyboard()
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                message_id=call.message.message_id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            del profile_creation_states[telegram_id]
            
    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")


def select_profile(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: select_profile_{profile_id}
        profile_id = int(call.data.split('_')[2])
        
        profile = StudentProfile.objects.get(id=profile_id, user__telegram_id=str(call.from_user.id))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        education_display = profile.get_education_type_display() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        course_display = f"{profile.course_or_class} –∫—É—Ä—Å" if profile.education_type == 'university' else f"{profile.course_or_class} –∫–ª–∞—Å—Å"
        status_display = "–ê–∫—Ç–∏–≤–Ω—ã–π" if profile.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        
        text = PROFILE_INFO_TEXT.format(
            profile_name=profile.profile_name,
            full_name=profile.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            education_type=education_display,
            course_or_class=course_display,
            balance=profile.balance,
            created_at=profile.created_at.strftime('%d.%m.%Y'),
            status=status_display
        )
        markup = generate_profile_management_keyboard(profile.id)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except (ValueError, StudentProfile.DoesNotExist):
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def switch_to_profile(call: CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: switch_to_profile_{profile_id}
        profile_id = int(call.data.split('_')[3])
        
        with transaction.atomic():
            profile = StudentProfile.objects.get(id=profile_id, user__telegram_id=str(call.from_user.id))
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile.user.student_profiles.update(is_active=False)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile.is_active = True
            profile.save()
            
            text = PROFILE_SWITCHED_SUCCESS.format(profile_name=profile.profile_name)
            markup = generate_profiles_menu_keyboard()
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                message_id=call.message.message_id
            )
    except (ValueError, StudentProfile.DoesNotExist):
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def edit_profile_data(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: edit_profile_data_{profile_id}
        profile_id = int(call.data.split('_')[3])
        
        profile = StudentProfile.objects.get(id=profile_id, user__telegram_id=str(call.from_user.id))
        
        text = PROFILE_DATA_MANAGEMENT_TEXT.format(profile_name=profile.profile_name)
        markup = generate_profile_data_management_keyboard(profile.id)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except (ValueError, StudentProfile.DoesNotExist):
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def delete_profile(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: delete_profile_{profile_id}
        profile_id = int(call.data.split('_')[2])
        
        profile = StudentProfile.objects.get(id=profile_id, user__telegram_id=str(call.from_user.id))
        
        text = PROFILE_DELETION_CONFIRMATION.format(profile_name=profile.profile_name)
        markup = generate_profile_deletion_confirmation_keyboard(profile.id)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except (ValueError, StudentProfile.DoesNotExist):
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def confirm_delete_profile(call: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: confirm_delete_profile_{profile_id}
        profile_id = int(call.data.split('_')[3])
        
        profile = StudentProfile.objects.get(id=profile_id, user__telegram_id=str(call.from_user.id))
        
        text = PROFILE_DELETION_FINAL_CONFIRMATION.format(
            profile_name=profile.profile_name,
            balance=profile.balance
        )
        markup = generate_profile_deletion_final_confirmation_keyboard(profile.id)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            text=text,
            reply_markup=markup,
            message_id=call.message.message_id
        )
    except (ValueError, StudentProfile.DoesNotExist):
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def final_delete_profile(call: CallbackQuery) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: final_delete_profile_{profile_id}
        profile_id = int(call.data.split('_')[3])
        
        with transaction.atomic():
            profile = StudentProfile.objects.get(id=profile_id, user__telegram_id=str(call.from_user.id))
            profile_name = profile.profile_name
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile.delete()
            
            text = PROFILE_DELETED_SUCCESS.format(profile_name=profile_name)
            markup = generate_profiles_menu_keyboard()
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                message_id=call.message.message_id
            )
    except (ValueError, StudentProfile.DoesNotExist):
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


def is_user_creating_profile(telegram_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    return str(telegram_id) in profile_creation_states


def get_active_profile(user: User) -> StudentProfile:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return user.student_profiles.get(is_active=True)
    except StudentProfile.DoesNotExist:
        return None
