from functools import wraps
from datetime import datetime

from django.conf import settings
from telebot.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from bot.keyboards import (
    ADMIN_MARKUP,
    generate_students_pagination_keyboard,
    generate_admin_payment_months_keyboard,
    generate_student_info_keyboard,
    generate_payment_history_keyboard
)
from bot import bot, logger
from bot.models import User, Payment, PaymentHistory
from bot.pricing import get_price_by_class


def admin_permission(func):
    """
    Checking user for admin permission to access the function.
    """

    @wraps(func)
    def wrapped(message: Message) -> None:
        user_id = message.from_user.id
        user = User.objects.get(telegram_id=user_id)
        if not user.is_admin:
            bot.send_message(user_id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
            logger.warning(f'–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –æ—Ç {user_id}')
            return
        return func(message)

    return wrapped


def admin_permission_callback(func):
    """
    Checking user for admin permission to access the callback function.
    """

    @wraps(func)
    def wrapped(call: CallbackQuery) -> None:
        user_id = call.from_user.id
        try:
            user = User.objects.get(telegram_id=user_id)
            if not user.is_admin:
                bot.answer_callback_query(call.id, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')
                logger.warning(f'–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –æ—Ç {user_id}')
                return
            return func(call)
        except User.DoesNotExist:
            bot.answer_callback_query(call.id, '‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
    return wrapped


@admin_permission
def admin_menu(msg: Message):
    bot.send_message(msg.from_user.id, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=ADMIN_MARKUP)


@admin_permission_callback
def admin_menu_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é –∏–∑ callback"""
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',
        reply_markup=ADMIN_MARKUP
    )


@admin_permission_callback
def handle_view_students(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=generate_students_pagination_keyboard()
    )


@admin_permission_callback
def handle_students_page(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(call.data.split('_')[2])
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=generate_students_pagination_keyboard(page=page)
    )


@admin_permission_callback
def handle_select_student(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback_data
        logger.info(f"Callback data: {call.data}")
        student_id = call.data.split('_')[2].strip()
        logger.info(f"Student ID: '{student_id}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º
        if not student_id or student_id in ['student', 'admin', 'user']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞: '{student_id}'")
            return
        
        student = User.objects.get(telegram_id=student_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–∞—Ö —É—á–µ–Ω–∏–∫–∞
        payments = PaymentHistory.objects.filter(user=student, status='completed').order_by('year', 'month')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = datetime.now()
        current_month = current_date.month
        current_year = current_date.year
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month_paid = payments.filter(month=current_month, year=current_year).exists()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
        last_paid_month = None
        if payments.exists():
            last_payment = payments.last()
            last_paid_month = f"{last_payment.month}/{last_payment.year}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ:\n\n"
        message_text += f"–§–ò–û: {student.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        message_text += f"Telegram ID: {student.telegram_id}\n"
        message_text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {student.register_date.strftime('%d.%m.%Y')}\n\n"
        
        message_text += f"üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:\n"
        message_text += f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month}/{current_year}): "
        message_text += "‚úÖ –û–ø–ª–∞—á–µ–Ω" if current_month_paid else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω"
        message_text += f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü: {last_paid_month or '–ù–µ—Ç –æ–ø–ª–∞—Ç'}\n\n"
        
        message_text += f"üìä –í—Å–µ–≥–æ –æ–ø–ª–∞—Ç: {payments.count()}"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=generate_student_info_keyboard(student_id)
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error(f"–£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_select_student: {e}")


@admin_permission_callback
def handle_view_payment_history(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–ª–∞—Ç —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback_data
        logger.info(f"Callback data: {call.data}")
        parts = call.data.split('_')
        logger.info(f"Split parts: {parts}")
        
        # ID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
        student_id = parts[-1].strip()
        logger.info(f"Student ID: '{student_id}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º
        if not student_id or student_id in ['student', 'admin', 'user']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞: '{student_id}'")
            return
        
        student = User.objects.get(telegram_id=student_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–ª–∞—Ç—ã —É—á–µ–Ω–∏–∫–∞
        payments = PaymentHistory.objects.filter(user=student, status='completed').order_by('year', 'month')
        
        if not payments.exists():
            message_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç —É—á–µ–Ω–∏–∫–∞ {student.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}:\n\n"
            message_text += "–£ —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—Ç."
        else:
            message_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç —É—á–µ–Ω–∏–∫–∞ {student.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}:\n\n"
            
            for payment in payments:
                month_name = {
                    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
                    5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
                    9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
                }[payment.month]
                
                message_text += f"üìÖ {month_name} {payment.year}\n"
                message_text += f"üí∞ –°—É–º–º–∞: {payment.amount_paid} ‚ÇΩ\n"
                message_text += f"üí≥ –¢–∏–ø: {payment.payment_type}\n"
                message_text += f"üìù –î–∞—Ç–∞: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=generate_payment_history_keyboard(student_id)
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error(f"–£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_view_payment_history: {e}")


@admin_permission_callback
def handle_mark_payment_for_student(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback_data
        logger.info(f"Callback data: {call.data}")
        parts = call.data.split('_')
        logger.info(f"Split parts: {parts}")
        
        # ID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
        student_id = parts[-1].strip()
        logger.info(f"Student ID: '{student_id}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º
        if not student_id or student_id in ['student', 'admin', 'user']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞: '{student_id}'")
            return
        
        student = User.objects.get(telegram_id=student_id)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –æ–ø–ª–∞—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}:",
            reply_markup=generate_admin_payment_months_keyboard(student_id)
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error(f"–£—á–µ–Ω–∏–∫ —Å ID '{student_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_mark_payment_for_student: {e}")


@admin_permission_callback
def handle_mark_student_payment(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã."""
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=generate_students_pagination_keyboard()
    )


@admin_permission_callback
def handle_admin_mark_payment(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        logger.info(f"Callback data: {call.data}")
        parts = call.data.split('_')
        logger.info(f"Split parts: {parts}")
        
        if len(parts) < 5:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
            return
        
        student_id = parts[3].strip()
        month = parts[4].strip()
        year = parts[5].strip()
        
        logger.info(f"Student ID: '{student_id}', Month: '{month}', Year: '{year}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º
        if not student_id or student_id in ['student', 'admin', 'user']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞: '{student_id}'")
            return
        
        student = User.objects.get(telegram_id=student_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        price_info = get_price_by_class(student.course_or_class)
        
        if price_info:
            lesson_price = price_info['price']
            class_name = price_info['name']
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
            lesson_price = 5000
            class_name = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
        payment = PaymentHistory.objects.create(
            user=student,
            amount_paid=lesson_price,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞–Ω—è—Ç–∏—è
            payment_type='cash',  # –¢–∏–ø –æ–ø–ª–∞—Ç—ã - –Ω–∞–ª–∏—á–Ω—ã–µ
            status='completed',  # –°—Ç–∞—Ç—É—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            month=int(month),
            year=int(year),
            pricing_plan=class_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞!\n\n"
                 f"–£—á–µ–Ω–∏–∫: {student.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                 f"–ö–ª–∞—Å—Å: {class_name}\n"
                 f"–ú–µ—Å—è—Ü: {month}/{year}\n"
                 f"–°—É–º–º–∞: {lesson_price} ‚ÇΩ",
            reply_markup=ADMIN_MARKUP
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        bot.send_message(
            student.telegram_id,
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∑–∞ {month}/{year}\n"
            f"–¢–∞—Ä–∏—Ñ: {class_name}\n"
            f"–°—É–º–º–∞: {lesson_price} ‚ÇΩ"
        )
    except User.DoesNotExist:
        bot.answer_callback_query(call.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error(f"–£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_mark_payment: {e}")
